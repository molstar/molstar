// Generated by running pwa.js, only modify this directly in testing as it is automatically (re)generated in the build process.
// The service worker:
// - caches the static resources that the app needs to function
// - intercepts server requests and responds with cached responses instead of going to the network
// - deletes old caches on activation

const CACHE_NAME = `molstar-viewer-4.10.0`;

// The static resources that the app needs to function.
const APP_STATIC_RESOURCES = [
    "favicon.ico",
    "circle.ico",
    "circle.svg",
    "wheel.svg",
    "tire.svg",
    "index-pwa.html",
    "molstar.css",
    "molstar.js",
    "manifest.webmanifest"
];
    
// On install, cache the static resources.
self.addEventListener("install", (event) => {
    event.waitUntil(
        (async () => {
            const cache = await caches.open(CACHE_NAME);
            await cache.addAll(APP_STATIC_RESOURCES);
            await self.skipWaiting();
        })(),
    );
});

// On activate, delete old caches.
self.addEventListener("activate", (event) => {
    event.waitUntil(
        (async () => {
            const keys = await caches.keys();
            await Promise.all(
                keys.map((key) => {
                    if (key !== CACHE_NAME) {
                        return caches.delete(key);
                    }
                }),
            );
            await clients.claim();
        })(),
    );
});

// On fetch, respond with cached resources.
self.addEventListener("fetch", (event) => {
    event.respondWith(
        caches.match(event.request).then((response) => {
            // Return the cached response if found, otherwise fetch from network
            return response || fetch(event.request).then((networkResponse) => {
                // Check if the network response is valid
                if (!networkResponse || networkResponse.status !== 200 || networkResponse.type !== 'basic') {
                    return networkResponse;
                }

                // Clone the network response
                const responseToCache = networkResponse.clone();

                // Open the cache and put the network response in it
                caches.open(CACHE_NAME).then((cache) => {
                    cache.put(event.request, responseToCache);
                });

                return networkResponse;
            }).catch((error) => {
                console.error('Fetching failed:', error);
                return new Response('Network error occurred', {
                    status: 408,
                    statusText: 'Network error occurred'
                });
            });
        }).catch((error) => {
            console.error('Cache match failed:', error);
            return new Response('Cache error occurred', {
                status: 408,
                statusText: 'Cache error occurred'
            });
        })
    );
});